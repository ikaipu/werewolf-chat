
=== docs/next_tasks.md ===

# 次のタスク

- [ ] URL指定でルームに入ったときに、Home.tsxに戻る問題を解決する。
  1. `src/components/ChatRoom.tsx`を修正:
     - ルームが存在しない場合の処理を追加
     - ユーザーがルームに参加していない場合の処理を追加
  2. `src/utils/roomUtils.ts`に新しい関数を追加:
     - `checkRoomExistence`: ルームの存在を確認する関数
     - `checkUserInRoom`: ユーザーがルームに参加しているか確認する関数
  3. `src/components/Home.tsx`を修正:
     - URLパラメータを確認し、ルームIDが指定されている場合はChatRoomコンポーネントにリダイレクト

- [ ] ログインコンポーネント（`src/components/Login.tsx`）の改善:
  1. エラーメッセージの表示方法を改善:
     - エラーメッセージをコンポーネント化し、アニメーション効果を追加
  2. 入力フィールドのバリデーションを強化:
     - メールアドレスの形式チェックを追加
     - パスワードの最小長さチェックを追加
  3. ログインボタンの状態管理:
     - 入力フィールドが空の場合はボタンを無効化
     - ログイン処理中はローディング表示を追加
  4. パスワードリセット機能へのリンクを追加:
     - パスワードリセットページへのリンクを追加
     - `src/components/PasswordReset.tsx`コンポーネントを新規作成
  5. ソーシャルログインオプションの追加:
     - Googleログインボタンを追加
     - `src/utils/auth.ts`にGoogleログイン関数を追加

- [ ] 全体的なエラーハンドリングの改善:
  1. `src/utils/errorHandler.ts`を作成:
     - エラーメッセージを一元管理する関数を実装
  2. 各コンポーネントでエラーハンドリングを統一:
     - `Login.tsx`, `Signup.tsx`, `ChatRoom.tsx`などで`errorHandler`を使用

- [ ] スタイリングの一貫性を向上:
  1. `tailwind.config.js`にカスタムカラーを追加:
     - プライマリカラー、セカンダリカラーなどを定義
  2. 共通のスタイルをユーティリティクラスとして定義:
     - `src/styles/utilities.css`を作成し、共通のスタイルを定義
  3. 各コンポーネントでユーティリティクラスを使用:
     - ボタン、入力フィールドなどのスタイルを統一
=== docs/requirements.md ===

# 捨てチャットルームアプリ要件定義

## 1. 機能要件

### 1.1 ユーザー管理

- ユーザー登録機能
- ログイン機能
- ログアウト機能

### 1.2 チャットルーム管理

- チャットルーム作成機能
  - ルーム名入力
  - ルーム作成後、自動的にルームに参加
- チャットルーム参加機能
  - URLによる参加
  - 初回参加時または退出後の再参加時に確認モーダルを表示
- チャットルーム退出機能
  - 個別ユーザーの退出
  - ページを閉じた際の自動退出
- 全ユーザー一斉退出機能
  - 全ての参加者が使用可能
  - 全参加者を一度に退出させる

### 1.3 メッセージング

- メッセージ送信機能
- リアルタイムメッセージ表示機能

### 1.4 ユーザー情報表示

- 参加者一覧リアルタイム表示機能

## 2. 非機能要件

### 2.1 セキュリティ

- Firebase Authenticationを使用したユーザー認証
- Firestoreセキュリティルールによるデータアクセス制御

### 2.2 パフォーマンス

- Firestoreを使用した高速なメッセージ同期とユーザー状態管理

### 2.3 ユーザビリティ

- レスポンシブデザインによるマルチデバイス対応
- 直感的なUI/UXデザイン
- リアルタイムでの参加者情報更新

### 2.4 拡張性
- 将来的な機能追加に対応できる柔軟な設計

### 2.5 保守性
- コードの可読性と保守性を考慮した実装
- 適切なコメントとドキュメンテーション

## 3. 技術スタック

- フロントエンド: React, TypeScript, Tailwind CSS, Zustand
- バックエンド: Firebase (Firestore, Authentication)
- デプロイ: Firebase Hosting
- 開発環境: Vercel

## 4. 制約条件

- チャットルームは一時的な使用を想定し、長期的なデータ保持は不要

## 5. 今後の拡張可能性

- 音声チャット機能の追加
- ゲーム進行と連動した自動ルーム管理
- カスタムル��ム設定機能
=== docs/screen_specifications/04_chat_room_with_participants.md ===

# チャットルームと参加者一覧画面仕様書

## 画面概要
ユーザーがチャットルームに参加した後に表示される画面です。メッセージの送受信、参加者の確認、退出などの機能を提供します。また、同じ画面で参加者一覧を表示します。

## レイアウト
```
+----------------------------------+
|  ヘッダー                        |
|  ルーム名    退出 全員退出       |
+----------------------------------+
|                                  |
|  メッセージ表示エリア            |
|                                  |
|  ユーザー1: メッセージ1          |
|  ユーザー2: メッセージ2          |
|  ...                             |
|                                  |
+----------------------------------+
|  +----------------------------+  |
|  | メッセージ入力             |  |
|  +----------------------------+  |
|  |        送信                |  |
|  +----------------------------+  |
+----------------------------------+
|                                  |
|  参加者一覧                      |
|                                  |
|  +----------------------------+  |
|  | ユーザー1                  |  |
|  +----------------------------+  |
|  | ユーザー2                  |  |
|  +----------------------------+  |
|  | ユーザー3                  |  |
|  +----------------------------+  |
|  ...                             |
|                                  |
+----------------------------------+
```

## 機能要素
1. ヘッダー
   - ルーム名: 現在のチャットルーム名を表示
   - 退出ボタン: クリックでルームから退出
   - 全員退出ボタン: クリックで全参加者を退出させる（管理者のみ表示）

2. メッセージ表示エリア
   - スクロール可能な領域でメッセージを表示
   - 各メッセージにはユーザー名と送信時間を表示

3. メッセージ入力エリア
   - テキスト入力フィールド
   - 送信ボタン: クリックでメッセージを送信

4. 参加者一覧
   - 現在のルームに参加しているユーザーを表示
   - 人狼の場合: すべての参加者名を表示
   - 人狼以外の場合: "現在の参加者数: X人" のように表示
   - 管理者のみ: 各参加者の横に個別退出ボタンを表示

## エラーハンドリング
- メッセージ送信失敗時: "メッセージの送信に失敗しました。再度お試しください"
- 退出失敗時: "ルームからの退出に失敗しました。再度お試しください"
- 全員退出失敗時: "全員の退出に失敗しました。再度お試しください"
- 個別退出失敗時: "ユーザーの退出に失敗しました。再度お試しください"

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- メッセージ表示エリアは十分なスペースを確保し、スクロールで過去のメッセージを閲覧可能に
- 送信ボタンは目立つ色使いで、タップ/クリックしやすいサイズに
- 参加者リストは必要に応じてスクロール可能に
 
=== docs/screen_specifications/02_signup.md ===

# 新規登録画面仕様書

## 画面概要
新しいユーザーがアプリケーションにアカウントを作成するための画面です。

## レイアウト
```
+----------------------------------+
|           新規登録               |
|                                  |
|  +----------------------------+  |
|  | ユーザー名                 |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  | メールアドレス             |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  | パスワード                 |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  | パスワード（確認）         |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  |        新規登録            |  |
|  +----------------------------+  |
|                                  |
+----------------------------------+
```

## 機能要素
1. ユーザー名入力フィールド
   - 入力形式: テキスト
   - バリデーション: なし

2. メールアドレス入力フィールド
   - 入力形式: メールアドレス
   - バリデーション: 正しいメールアドレス形式であること

3. パスワード入力フィールド
   - 入力形式: パスワード（マスク表示）
   - バリデーション: 8文字以上であること

4. パスワード確認入力フィールド
   - 入力形式: パスワード（マスク表示）
   - バリデーション: パスワードと一致すること

5. 新規登録ボタン
   - クリックで新規登録処理を実行
   - 入力内容が正しくない場合はエラーメッセージを表示

## エラーハンドリング
- 未入力項目がある場合: "すべての項目を入力してください"
- メールアドレス形式が不正: "正しいメールアドレスを入力してください"
- パスワードが短すぎる: "パスワードは8文字以上で入力してください"
- パスワードと確認が一致しない: "パスワードが一致しません"
- 新規登録失敗時: "新規登録に失敗しました。再度お試しください"

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- 入力フィールドは十分な大きさで操作しやすく
- 新規登録ボタンは目立つ色使いで、タップ/クリックしやすいサイズに

## その他の注意点
- パスワードリセット機能へのリンクを追加することを検討
- ソーシャルログイン（Google, Facebookなど）の追加も将来的に検討
=== docs/screen_specifications/05_create_room.md ===

# チャットルーム作成画面仕様書

## 画面概要
ユーザーが新しいチャットルームを作成するための画面です。ルーム名の入力と作成後のURLの生成・コピー機能を提供します。

## レイアウト
```
+----------------------------------+
|  ヘッダー                        |
|  ロゴ           戻る             |
+----------------------------------+
|                                  |
|  チャットルーム作成              |
|                                  |
|  +----------------------------+  |
|  | ルーム名                   |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  |        作成                |  |
|  +----------------------------+  |
|                                  |
|  作成されたURLをコピー          |
|                                  |
+----------------------------------+
```

## 機能要素
1. ヘッダー
   - ロゴ: アプリのロゴを表示
   - 戻るボタン: クリックで前の画面に戻る

2. ルーム名入力フィールド
   - 入力形式: テキスト
   - バリデーション: 2文字以上20文字以下

3. 作成ボタン
   - クリックでルームを作成し、URLを生成
   - 作成されたURLをコピー可能な領域を表示

## エラーハンドリング
- ルーム名が短すぎる/長すぎる: "ルーム名は2文字以上20文字以下で入力してください"
- ルームの作成に失敗した場合: "ルームの作成に失敗しました。再度お試しください"

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- 入力フィールドは十分な大きさで操作しやすく
- 作成ボタンは目立つ色使いで、タップ/クリックしやすいサイズに

## その他の注意点
- ルーム名の入力に制限を設けるか検討（例: 特定の文字列を含める/含めない）
- 作成されたURLをコピーできる領域の実装方法を検討（例: コピーボタン、自動コピー）
- 将来的に、ルームの設定（パスワード保護、参加制限など）を追加する可能性を検討
=== docs/screen_specifications/06_join_room.md ===

# チャットルーム参加画面仕様書

## 画面概要
ユーザーが既存のチャットルームに参加するための画面です。ルームのURLを入力して参加する機能を提供します。

## レイアウト
```
+----------------------------------+
|  ヘッダー                        |
|  ロゴ           戻る             |
+----------------------------------+
|                                  |
|  チャットルーム参加              |
|                                  |
|  +----------------------------+  |
|  | ルームURL                  |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  |        参加                |  |
|  +----------------------------+  |
|                                  |
|  または                           |
|                                  |
|  +----------------------------+  |
|  |        QRコードを読み取る  |  |
|  +----------------------------+  |
|                                  |
+----------------------------------+
```

## 機能要素
1. ヘッダー
   - ロゴ: アプリのロゴを表示
   - 戻るボタン: クリックでホーム画面に戻る

2. ルームURL入力フィールド
   - 入力形式: URL
   - バリデーション: 正しいURL形式であること

3. 参加ボタン
   - クリックで入力されたURLのルームに参加
   - 参加成功時にチャットルーム画面に遷移

4. QRコードスキャンボタン
   - クリックでQRコードスキャナーを起動
   - スキャン成功時にチャットルーム画面に遷移

## エラーハンドリング
- URL形式が不正: "正しいURLを入力してください"
- 存在しないルーム: "指定されたルームが見つかりません"
- 参加失敗時: "ルームへの参加に失敗しました。再度お試しください"
- QRコードスキャン失敗時: "QRコードの読み取りに失敗しました。再度お試しください"

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- 入力フィールドは十分な大きさで操作しやすく
- 参加ボタンとQRコードスキャンボタンは目立つ色使いで、タップ/クリックしやすいサイズに

## その他の注意点
- URLの入力を簡単にするため、クリップボードからの貼り付け機能を提供することを検討
- QRコードスキャン機能の実装方法（ネイティブカメラアプリを使用するか、ウェブカメラを使用するか）を検討
- 将来的に、最近参加したルームの履歴表示機能の追加を検討
=== docs/screen_specifications/03_home.md ===

# ホーム画面仕様書

## 画面概要
ユーザーがログイン後に表示される主要な画面です。チャットルームの作成、参加、および他の主要機能へのアクセスを提供します。

## レイアウト
```
+----------------------------------+
|  ヘッダー                        |
|  ロゴ           ユーザー名 ログアウト |
+----------------------------------+
|                                  |
|  +----------------------------+  |
|  |     チャットルーム作成     |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  |     チャットルーム参加     |  |
|  +----------------------------+  |
|                                  |
|  最近のチャットルーム一覧      |
|                                  |
+----------------------------------+
```

## 機能要素
1. ヘッダー
   - ロゴ
   - ユーザー名
   - ログアウトボタン

2. チャットルーム作成ボタン
   - クリックでチャットルーム作成画面に遷移

3. チャットルーム参加ボタン
   - クリックでチャットルーム参加画面に遷移

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- ボタンは目立つ色使いで、タップ/クリックしやすいサイズに
- 最近のチャットルーム一覧はリスト形式で表示

## その他の注意点
- チャットルームの作成や参加に必要な情報を適切に表示する必要がある
- 最近のチャットルーム一覧の表示件数を制限する必要がある
- 将来的に、チャットルームの検索機能やフィルタリング機能を追加する可能性がある
=== docs/screen_specifications/01_login.md ===

# ログイン画面仕様書

## 画面概要
ユーザーがアプリケーションにログインするための画面です。

## レイアウト
```
+----------------------------------+
|           ログイン               |
|                                  |
|  +----------------------------+  |
|  | メールアドレス             |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  | パスワード                 |  |
|  +----------------------------+  |
|                                  |
|  +----------------------------+  |
|  |        ログイン            |  |
|  +----------------------------+  |
|                                  |
|  アカウントをお持ちでない方は    |
|  こちら（新規登録へのリンク）    |
|                                  |
+----------------------------------+
```

## 機能要素
1. メールアドレス入力フィールド
   - 入力形式: メールアドレス
   - バリデーション: 正しいメールアドレス形式であること

2. パスワード入力フィールド
   - 入力形式: パスワード（マスク表示）
   - バリデーション: 8文字以上であること

3. ログインボタン
   - クリックでログイン処理を実行
   - 入力内容が正しくない場合はエラーメッセージを表示

4. 新規登録リンク
   - クリックで新規登録画面に遷移

## エラーハンドリング
- 未入力項目がある場合: "すべての項目を入力してください"
- メールアドレス形式が不正: "正しいメールアドレスを入力してください"
- パスワードが短すぎる: "パスワードは8文字以上で入力してください"
- ログイン失敗時: "メールアドレスまたはパスワードが間違っています"

## デザイン要素
- 全体的に明るく清潔感のあるデザイン
- Tailwind CSSを使用してレスポンシブ対応
- 入力フィールドは十分な大きさで操作しやすく
- ログインボタンは目立つ色使いで、タップ/クリックしやすいサイズに

## その他の注意点
- パスワードリセット機能へのリンクを追加することを検討
- ソーシャルログイン（Google, Facebookなど）の追加も将来的に検討
=== docs/flowcharts/chatroom_direct_access.md ===

# ChatRoom直接アクセス時の詳細フロー

```mermaid
graph TD
    A[URLで直接ChatRoomにアクセス] --> B{useUserフックでユーザー情報を取得}
    B -- ユーザー情報なし --> C[ログインページにリダイレクト]
    B -- ユーザー情報あり --> D[useParamsでroomIdを取得]
    D --> E{roomIdが存在するか?}
    E -- No --> F[Homeページにリダイレクト]
    E -- Yes --> G[useRoomDataフックを呼び出し]
    G --> H{ルームが存在するか?}
    H -- No --> I[Homeページにリダイレクト]
    H -- Yes --> J{ユーザーがルームに参加しているか?}
    J -- No --> K[参加ダイアログを表示]
    J -- Yes --> L[ルームデータを取得]
    L --> M[useMessagesフックでメッセージを取得]
    M --> N[useParticipantsフックで参加者を取得]
    N --> O[チャットルームUIを表示]
    K --> P{参加するか?}
    P -- Yes --> Q[ルームに参加]
    Q --> L
    P -- No --> R[Homeページにリダイレクト]
```

## 詳細なステップ説明

1. ユーザーがURLを直接入力してChatRoomにアクセスします。

2. useUserフックが呼び出され、ユーザー情報を取得します。
   - ユーザー情報がない場合、ログインページにリダイレクトされます。

3. useParamsフックを使用して、URLからroomIdを取得します。

4. roomIdの存在をチェックします。
   - roomIdが存在しない場合、Homeページにリダイレクトされます。

5. useRoomDataフックが呼び出され、以下の処理が行われます：
   a. ルームの存在をチェックします。
   b. ユーザーがルームに参加しているかチェックします。

6. ルームが存在しない場合、Homeページにリダイレクトされます。

7. ユーザーがルームに参加していない場合：
   a. 参加ダイアログが表示されます。
   b. ユーザーが参加を選択した場合、ルームに参加し、ルームデータを取得します。
   c. ユーザーが参加をキャンセルした場合、Homeページにリダイレクトされます。

8. ユーザーがルームに参加している場合：
   a. useMessagesフックを使用して、ルームのメッセージを取得します。
   b. useParticipantsフックを使用して、ルームの参加者リストを取得します。

9. 取得したデータを使用して、チャットルームのUIが表示されます。

このフローにより、ユーザーが直接URLを入力してChatRoomにアクセスした際の挙動が詳細に説明されています。各ステップでの条件分岐や、使用されているReactフックの役割が明確になっています。

=== docs/use_cases.md ===

# 捨てチャットルームアプリ ユースケース図

```mermaid
graph TD
    A[ユーザー] --> B(ユーザー登録)
    A --> C(ログイン)
    A --> D(ログアウト)
    A --> E(チャットルーム作成)
    A --> F(チャットルーム参加)
    A --> G(メッセージ送信)
    A --> H(参加者一覧表示)
    A --> I(チャットルーム退出)
    A --> J(全ユーザー一斉退出)
=== docs/memo.md ===

# 捨てチャットルームアプリを作成したい

## アプリを作りたい背景

人狼ゲームを行う際、夜の間に人狼同士が戦略を話し合うことができたら戦略の幅が広がる。
人狼ゲームの昼時間はZoomなどのビデオアプリで行うため、チャットアプリを使う必要がない。

なので、夜時間に人狼同士が話し合うことができるチャットアプリを作りたい。

### 人狼ゲームの原則

基本的にプレイヤーは他のプレイヤーの役職がわからない。
人狼だけは味方の人狼が誰かを知っている
なので人狼以外のユーザーは誰がチャットルームに参加をしているかわからないようにする必要がある。
逆に、人狼は誰がチャットルームに参加をしているかわかるようにする必要がある。

ゲームは何戦も繰り返し、そのたびに役職は変わるため、チャットルームのメンバーも変わる。
そのたびにルームをつくるのはめんどくさいため、同じルームに参加しているユーザーを一斉に退出させることで、ルームを作り直すことができるようにしたい。

## ユーザー

- ユーザーはチャットルームを作成できる
  - ルームを作成するボタンを押すとモーダルが表示され、ルーム名を入力できる
  - ルーム名を入力して「作成」ボタンを押すとルームが作成され、ルームのURLがコピーできる
- ユーザーはチャットルームに参加できる
  - チャットルームのURLを入力して参加するとチャットルームに参加できる
- ユーザーはチャットルームから退出できる
  - チャットルームに参加しているユーザーは「退出」ボタンを押すとチャットルームから退出できる
- ユーザーはチャットルームにメッセージを送信できる
  - チャットルームに参加しているユーザーはメッセージを送信できる
- ユーザーはチャットルームに参加しているユーザーを確認できる
  - チャットルームに参加しているユーザーは「参加者」ボタンを押すと確認できる
- ユーザーはチャットルームに参加しているユーザーを一斉に退出できる
- ユーザーはチャットルームに参加しているユーザーを一人ずつ退出できる

## 技術

- フロントエンド: React, TypeScript, Tailwind CSS, Vercel, Zustand
- データベース: Firebase Firestore
- デプロイ: Firebase Hosting

## 開発手順

1. プロジェクトのセットアップ
   - React + TypeScriptのプロジェクトを作成
   - Tailwind CSSをインストールして設定
   - Firebase SDKをインストール

2. Firebaseプロジェクトの設定
   - Firebaseコンソールでプロジェクトを作成
   - Firestoreデータベースを有効化
   - アプリケーションの認証情報を取得

3. ユーザー認証機能の実装
   - サインアップ、ログイン、ログアウト機能を作成

4. チャットルーム機能の実装
   - ルーム作成機能
   - ルーム参加機能
   - メッセージ送信機能
   - リアルタイムメッセージ表示機能

5. ユーザー管理機能の実装
   - 参加者一覧表示機能
   - ユーザー退出機能
   - 全ユーザー一斉退出機能

6. UIデザインの改善
   - Tailwind CSSを使用してレスポンシブデザインを適用
   - モーダル、ボタン、入力フォームなどのコンポーネントを作成

7. セキュリティルールの設定
   - Firestoreのセキュリティルールを設定し、適切なアクセス制御を実装

8. テストとデバッグ
   - 各機能のユニットテストを作成
   - エンドツーエンドテストを実施

9. デプロイ
   - Firebase Hostingを使用してアプリケーションをデプロイ

10. 監視とメンテナンス
    - Firebase Analyticsを設定して利用状況を監視
    - 必要に応じて機能の改善やバグ修正を行う